""" Trace the graph of the loss and avg_loss
form the output file generated by tsp. """

import numpy as np
import pickle as pkl
import matplotlib.pyplot as plt
from os.path import join

dir_ = "utils_eliott"
loss_file = "coffee5.csv" 

def main():
    # load the csv file
    series = [] 
    with open(join(dir_, loss_file), "r") as f:
        next(f) # skip the header
        for line in f:
            temp = [item.strip() for item in line.split(",")]
            series.append(tuple(temp))  
    
    # debug irregularities in the loss.csv file (badly formated lines and non sequential steps)
    prev_step = 0
    old_shift = 1
    for item in series:
        step = int(item[0])
        shift = step - prev_step
        if not len(item) == 5 or not shift == old_shift:
            print(item)
        prev_step = step
        old_shift = shift

    # transpose the columns to get three lists: steps, loss and avg_loss
    series = [(int(a), float(b), float(c), float(d), float(e)) for a, b, c, d, e in series]
    steps, losses, avg_losses, step_times, mAPs = zip(*series)
    steps, losses, avg_losses, step_times, mAPs = list(steps), list(losses), list(avg_losses), list(step_times), list(mAPs)

    start = 0
    plot_seconds = False
    steps, losses, avg_losses, step_times, mAPs = steps[start:], losses[start:], avg_losses[start:], step_times[start:], mAPs[start:]

    #plot the graph v2
    fig = plt.figure(num=None, figsize=(10, 4), dpi=800, facecolor="w", edgecolor="k")
    plt.title(f"max mAP@0.5 = {max(mAPs)}")
    host = fig.add_subplot(111)
    if plot_seconds:
        par2 = host.twinx()
    par1 = host.twinx()
    
    gap = 50 if len(steps)<=1000 else (500 if len(steps) <= 10000 else 1000)
    host.xaxis.set_ticks(np.arange(0,len(steps)+500, gap))
    host.set_yscale("log")
    host.grid(True, which="both", linewidth=0.3)
    par1.set_ylim(0, 100)
    par1.yaxis.set_ticks(np.arange(0, 110, 10))
    if plot_seconds:
        par2.set_ylim(min(step_times)-2, max(step_times)+2)
        par2.spines['right'].set_position(('outward', 60))      

    host.set_xlabel("steps")
    host.set_ylabel("loss")
    par1.set_ylabel("%")
    if plot_seconds: 
        par2.set_ylabel("seconds")


    p1, = host.plot(steps, losses, label="loss")
    p2, = host.plot(steps, avg_losses, label="avg_loss")
    p3, = par1.plot(steps, mAPs, color="red", label="mAP")
    if plot_seconds:
        p4, = par2.plot(steps, step_times, color="green", label="step_time")

    lns = [p1, p2, p3]
    host.legend(handles=lns, loc='upper left')

    # right, left, top, bottom
    # no x-ticks                 
    #par2.xaxis.set_ticks([])
    # Sometimes handy, same for xaxis
    #par2.yaxis.set_ticks_position('right')

    host.yaxis.label.set_color(p1.get_color())
    par1.spines['left'].set_color(p1.get_color())
    par1.yaxis.label.set_color("red")
    par1.spines['right'].set_color("red")
    if plot_seconds:
        par2.yaxis.label.set_color("green")
        par2.spines["right"].set_color("green")

    plt.savefig(join(dir_, loss_file.replace(".csv", ".png")), bbox_inches='tight')


if __name__ == "__main__":
    main()
